클라이언트 (view)
요청
html, js, asp, Jsp(java Server page), php, thymleaf, 
Servlet, Spring web MVC, Sprint Boot


서버 (controller)
WebServer
웹서비스 제공
클라이언트가 요청하면 응답한다
WebServer는 Client에게 스레드 단위로 서비스를 제공한다


DBServer: 데이터베이스가 가지고 있는 어떤 기억들을 제공해준다
 	oracle musql sq라이트 
	데이터서버에서 읽어서 웹서버에서 인메모리로 구축해줘야 
	속도가 빨라진다, 전원을 내릴때 등 사이클에서 쉬어가는 타임에 DB에 
	저장한다

회사에서 DB 서버를 사용할때 책정된 금액에서 가장 좋은걸 고를줄 알아야함
보통 구매비용에 교육비는 포함되어 있지만
유지보수비용이랑 설치비용 다 생각해야한다.



FtpServer:
MapServer:

tomcat : 클라이언트에 응답해주는 것이었다

자바의 장점이 플랫폼에 독립적이다
OS는 아무거나 사용해도 괜찮
웹서버를 뭐로 쓰던지
.war로 배포만 하면 상관없다

ejb 자바의 암흑기
스트러츠 => 웹에서만 서비스 해줄 수 있다
	인트라넷 구축 힘듬 => 복잡함 =>안씀

웹폴더 구조?
web app
web app name
  폴더들
    web file
    ~~jsp, ~~html, ~~js, ~~css
  WEB-INF
    classes
      ~~.java(계약조건에 자바파일(원본파일)까지 제공하는지 써있음,금액달라짐
      ~~.class
    web.xml (환경설정파일) => DD(Deployment Descriptor)
                                    Deployment Descriptor
  index~~

스크립트 위주면 static web project

Coxtext root = 웹 어클리케이션 이름
content directory = 웹 어플리케이션이 올자리

오전수업정리 ====
http://op:port/webapp/index.~
http://op:port/webapp/programname
http://op:port/HelloWeb/h.do

cpmtext root(HelloWeb)
path


=======================

1. Servlet에서 JSP 호출하기
 Servlet 에서 JSP를 호출해서 데이터를 넘긴다
	Test1Servlet.java ==> t1.do(클라이언트의 요청)
	URL 창에서 직접 호출 t1.do ==> 오늘의 날짜를 받아서
	t1.jsp 를 호출
	t1.jsp 에서는 날짜를 출력한다

1. 클라이언트가 t1.do로 request(요청)함 (=호출함)
2. web.xml에서 서블릿분석 ==> Test1Servlet를 호출
3. Test1Servlet의 doGet 메소드실행
4. 캘린더 클래스로 오늘의 날짜를 받아서 출력 폼을 결정해서 폼에 오늘의 날짜를 담아줌
5. setAttribute로 오늘의 날짜를 담은 출력폼을 맵핑? key value로 저장(value값에)
6. getRequestDispatcher.forward 로 t1.jsp를 호출하면서  request와response 값을 넘겨줌
7. t1.jsp엣는 날짜를 출력해준다 (이 값을 클라이언트에게 response(응답)해줌)

t1.do와 t2.do의 다른점은

	1) request.getRequestDispatcher.forward 방식으로 t1.jsp호출하기
		request와 response를 가져간다~
	2) response.sendRedirect 방식으로 t2.jsp?today2 호출하기
		request와 response를 초기화?해서 null이 뜸
		내가 설정한 URL로 다시 접속한다
	(여기서 request와 response를 초기화하기 때문에 
	내가 출력폼을 t2.jsp에게 파라미터 값으로 넘겨주고 t2.jsp는 request와 response를 출력하는게 아닌 서블릿이 파라메터 값으로 넘겨주는걸 출력한다 라고 이해했습니다)
		
		

2. JSP에서 Servlet 호출하기
  JSP에서 Servlet 을 호출하면서 데이터를 넘긴다
	index.jsp ==> login.do를 호출
		아이디와 암호를 받아서 서블릿으로 넘겨준다
		서블릿에서는 아이디:gangsan89, 암호: 1233 라면 
		로그인 성공 welcome.jsp로 이동
		로그인 실패 loginFail.jsp로 이동

1. 클라이언트가 index.jsp를 호출하기
2. index.jsp가 아이디와 패스워드를 입력받아 login.do를 호출(post메소드호출)하면서 값을 넘겨줌
3. web.xml에서 login.do를 분석해 LoginProcessServlet을 호출해줌
4. LoginProcessServlet의 dopost메소드 실행
5. index.jsp가 넘겨준 값을 각각 스트링타입으로 변수에 저장해줌
6. 변수에 담긴 값이 gangsan89 / 1233이 맞는지 비교해서 (저는 이렇게 지정했습니다)
7. 맞으면 welcome!(value) 메시지를 msg(key)랑 맵핑해준 후 getRequestDispatcher.forward로
    welcome.jsp를 호출해주면서 값을 넘겨줌 (서블릿에서 메시지를 정해서 넘겨주므로 getRequest사용)
	7-1 welcome.jsp는 welcome 메시지를 출력해줌!
8. 틀릴경우 response.sendRedirect로 loginFail.jsp를 호출해줌(loginFail.jsp에서 메시지를 자체적으로 출력하여 response 사용) 
	8-1 loginFail.jsp는 설정해준 값의 오류라는 메시지를 출력하며 링크로 index.jsp로 이동할 수 있게 해줌

2번 예제의 경우 패스워드를 다루기 때문에 URL에 내용이 뜨지 않는 post방식을 이용했다

